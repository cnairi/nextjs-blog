{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nconst postsDirectory = path.join(process.cwd(), 'posts');\nexport function getAllPostIds() {\n  const fileNames = fs.readdirSync(postsDirectory); // Returns an array that looks like this:\n  // [\n  //   {\n  //     params: {\n  //       id: 'ssg-ssr'\n  //     }\n  //   },\n  //   {\n  //     params: {\n  //       id: 'pre-rendering'\n  //     }\n  //   }\n  // ]\n\n  return fileNames.map(fileName => {\n    return {\n      params: {\n        id: fileName.replace(/\\.md$/, '')\n      }\n    };\n  });\n}\nexport function getSortedPostsData() {\n  // Get file names under /posts\n  const fileNames = fs.readdirSync(postsDirectory);\n  const allPostsData = fileNames.map(fileName => {\n    // Remove \".md\" from file name to get id\n    const id = fileName.replace(/\\.md$/, ''); // Read markdown file as string\n\n    const fullPath = path.join(postsDirectory, fileName);\n    const fileContents = fs.readFileSync(fullPath, 'utf8'); // Use gray-matter to parse the post metadata section\n\n    const matterResult = matter(fileContents); // Combine the data with the id\n\n    return _objectSpread({\n      id\n    }, matterResult.data);\n  }); // Sort posts by data\n\n  return allPostsData.sort((a, b) => {\n    if (a.data < b.data) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n}","map":{"version":3,"sources":["/Users/camillenairi/my-app/nextjs-blog/lib/posts.js"],"names":["fs","path","matter","postsDirectory","join","process","cwd","getAllPostIds","fileNames","readdirSync","map","fileName","params","id","replace","getSortedPostsData","allPostsData","fullPath","fileContents","readFileSync","matterResult","data","sort","a","b"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,MAAMC,cAAc,GAAGF,IAAI,CAACG,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,OAAzB,CAAvB;AAEA,OAAO,SAASC,aAAT,GAAyB;AAC/B,QAAMC,SAAS,GAAGR,EAAE,CAACS,WAAH,CAAeN,cAAf,CAAlB,CAD+B,CAG9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAOK,SAAS,CAACE,GAAV,CAAcC,QAAQ,IAAI;AAChC,WAAO;AACNC,MAAAA,MAAM,EAAE;AACPC,QAAAA,EAAE,EAAEF,QAAQ,CAACG,OAAT,CAAiB,OAAjB,EAA0B,EAA1B;AADG;AADF,KAAP;AAKA,GANM,CAAP;AAOD;AAED,OAAO,SAASC,kBAAT,GAA8B;AACpC;AACA,QAAMP,SAAS,GAAGR,EAAE,CAACS,WAAH,CAAeN,cAAf,CAAlB;AACA,QAAMa,YAAY,GAAGR,SAAS,CAACE,GAAV,CAAcC,QAAQ,IAAI;AAC9C;AACA,UAAME,EAAE,GAAGF,QAAQ,CAACG,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAAX,CAF8C,CAI9C;;AACA,UAAMG,QAAQ,GAAGhB,IAAI,CAACG,IAAL,CAAUD,cAAV,EAA0BQ,QAA1B,CAAjB;AACA,UAAMO,YAAY,GAAGlB,EAAE,CAACmB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB,CAN8C,CAQ9C;;AACA,UAAMG,YAAY,GAAGlB,MAAM,CAACgB,YAAD,CAA3B,CAT8C,CAW9C;;AACA;AACCL,MAAAA;AADD,OAEIO,YAAY,CAACC,IAFjB;AAIA,GAhBoB,CAArB,CAHoC,CAoBpC;;AACA,SAAOL,YAAY,CAACM,IAAb,CAAkB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAClC,QAAID,CAAC,CAACF,IAAF,GAASG,CAAC,CAACH,IAAf,EAAqB;AACpB,aAAO,CAAP;AACA,KAFD,MAEO;AACN,aAAO,CAAC,CAAR;AACA;AACD,GANM,CAAP;AAOA","sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport matter from 'gray-matter'\n\nconst postsDirectory = path.join(process.cwd(), 'posts')\n\nexport function getAllPostIds() {\n\tconst fileNames = fs.readdirSync(postsDirectory)\n\n  // Returns an array that looks like this:\n  // [\n  //   {\n  //     params: {\n  //       id: 'ssg-ssr'\n  //     }\n  //   },\n  //   {\n  //     params: {\n  //       id: 'pre-rendering'\n  //     }\n  //   }\n  // ]\n  return fileNames.map(fileName => {\n\t  return {\n\t\t  params: {\n\t\t\t  id: fileName.replace(/\\.md$/, '')\n\t\t  }\n\t  };\n  });\n}\n\nexport function getSortedPostsData() {\n\t// Get file names under /posts\n\tconst fileNames = fs.readdirSync(postsDirectory)\n\tconst allPostsData = fileNames.map(fileName => {\n\t\t// Remove \".md\" from file name to get id\n\t\tconst id = fileName.replace(/\\.md$/, '')\n\n\t\t// Read markdown file as string\n\t\tconst fullPath = path.join(postsDirectory, fileName)\n\t\tconst fileContents = fs.readFileSync(fullPath, 'utf8')\n\n\t\t// Use gray-matter to parse the post metadata section\n\t\tconst matterResult = matter(fileContents)\n\n\t\t// Combine the data with the id\n\t\treturn {\n\t\t\tid,\n\t\t\t...matterResult.data\n\t\t}\n\t})\n\t// Sort posts by data\n\treturn allPostsData.sort((a, b) => {\n\t\tif (a.data < b.data) {\n\t\t\treturn 1\n\t\t} else {\n\t\t\treturn -1\n\t\t}\n\t})\n}"]},"metadata":{},"sourceType":"module"}